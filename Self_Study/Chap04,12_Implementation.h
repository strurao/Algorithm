/*
구현이란 머릿속에 있는 알고리즘을 소스코드로 바꾸는 과정이다

흔히 '풀이를 떠올리는 것은 쉽지만 소스코드로 옮기기 어려운 문제'를 지칭한다
- 알고리즘은 간단하나 코드는 지나칠 만큼 길어지는 문제
- 실수 연산을 다루고, 특정 소수점 자리까지 출력해야 하는 문제
- 문자열을 특정한 기준에 따라서 끊어 처리해야 하는 문제 (파싱해야하는)
- 적절한 라이브러리를 찾아서 사용해야 하는 문제

대체로 사소한 조건 설정이 많은 문제일수록 코드로 구현하기가 까다롭다.

완전탐색은 모든 경우의 수를 주저 없이 다 계산하는 해결 방법이며,
시뮬레이션은 문제에서 제시한 알고리즘을 한 단계씩 차례대로 직접 수행해야 하는 문제 유형이다.
둘 다 구현이 핵심이 되는 경우가 많으므로 이 두 유형을 모두 묶어서 구현 장에서 다루고 있다.
+) 참고로 완전탐색과 시뮬레이션 문제에서는 2차원 공간에서의 방향 벡터가 자주 활용된다.
+) 완전탐색은 모든 경우의 수를 다 계산해야 하므로 반복문 혹은 재귀 함수를 적절히 사용하며 예외 케이스를 모두 확인해야 하는 경우가 많다.
그러므로 일반적으로 DFS/BFS 알고리즘을 이용해서 문제를 해결한다.
+) 시뮬레이션 문제 또한 문제에서 요구하는 복잡한 구현 요구사항을 그대로 코드로 옮겨야 한다는 점에서 해결 방법이 비슷하다.

보통 구현 유형의 문제는 사소한 입력 조건 등을 문제에서 명시해주며 문제의 길이가 꽤 긴 편이다.
문제의 길이를 보고 지레 겁먹는데, 고차원적인 사고력을 요구하는 문제는 나오지 않는 편이라 문법에 익숙하다면 오히려 쉽게 풀 수 있다.


*/