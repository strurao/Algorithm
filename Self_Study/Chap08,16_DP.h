/*
Dynamic Programming
- 한 번 해결된 부분 문제의 정답을 메모리에 기록하여, 한 번 계산한 답은 다시 계산하지 않도록 하는 문제 해결 기법이다.
- 점화식을 그대로 코드로 옮겨서 구현할 수 있는데, 점화식이란 인접한 항들 사이의 관계식을 의미한다.
- 큰 문제를 작게 나누고, 같은 문제라면 한 번씩만 풀어 문제를 효율적으로 해결하는 알고리즘 기법이다

다이나믹 프로그래밍을 이용한 소스코드를 작성하는 방법으로는 2가지가 있다.
- 탑다운 방식은 재귀 함수를 이용하여 큰 문제를 해결하기 위해 작은 문제를 호출하는 방식이다.
- 보텀업 방식은 단순히 반복문을 이용하여 작은 문제를 먼저 해결하고, 해결된 작은 문제를 모아 큰 문제를 해결하는 방식이다.

항상 다이나믹 프로그래밍을 사용할 수는 없으며, 다음 조건을 만족할 때 사용할 수 있다
- 큰 문제를 작은 문제로 나눌 수 있다
- 작은 문제에서 구한 정답은 그것을 포함하는 큰 문제에서도 동일하다

Memoization (메모이제션) : 다이나믹 프로그래밍을 구현하는 방법 중 한 종류로, 
한 번 구한 결과를 메모리 공간에 메모해두고 같은 식을 호출하면 메모한 결과를 그대로 가져오는 기법을 의미한다
값을 저장하는 방법이므로 캐싱이라고도 한다
- 한 번 구한 정보를 리스트에 저장하면 된다
- 다이나믹 프로그래밍을 재귀적으로 수행하다가 같은 정보가 필요할 때는 이미 구한 정답을 그대로 리스트에서 가져오면 된다(반환한다)
*/